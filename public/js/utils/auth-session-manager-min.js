class AuthSessionManager{constructor(e,i={}){this.options={refreshBuffer:30,warningTime:10,minWaitTime:60,showWarning:!0,logActivity:!0,debugLog:!1,...i},this.sessionTimeout=parseInt(e)||0,this.debugLog("üîß AuthSessionManager constructor called"),this.debugLog("üìä sessionTimeout received:",e,typeof e),this.debugLog("‚öôÔ∏è options received:",i),this.debugLog("‚úÖ AuthSessionManager initialized with:"),this.debugLog("   sessionTimeout:",this.sessionTimeout),this.debugLog("   options:",this.options),this.init()}debugLog(...e){this.options.debugLog}debugWarn(...e){this.options.debugLog}init(){if(this.debugLog("üöÄ AuthSessionManager.init() started"),this.sessionTimeout<=0)return this.debugWarn("‚ö†Ô∏è Session timeout is 0 or negative - no auto refresh"),void this.debugLog("   sessionTimeout value:",this.sessionTimeout);const e=Math.max(this.sessionTimeout-this.options.refreshBuffer,this.options.minWaitTime),i=Math.max(e-this.options.warningTime,30);this.debugLog("‚è∞ Timing calculations:"),this.debugLog("   Original session timeout:",this.sessionTimeout+"s"),this.debugLog("   Refresh buffer:",this.options.refreshBuffer+"s"),this.debugLog("   Calculated refresh time:",e+"s"),this.debugLog("   Warning time:",i+"s"),this.debugLog("   Warning will show in:",i+"s"),this.debugLog("   Page will refresh in:",e+"s"),this.options.showWarning&&i<e?(this.debugLog("üìÖ Scheduling warning for "+i+"s from now"),setTimeout((()=>{this.debugLog("‚ö†Ô∏è Showing session warning now"),this.showWarning(this.options.warningTime)}),1e3*i)):this.debugLog("‚ùå Warning not scheduled (showWarning="+this.options.showWarning+", warningTime="+i+", refreshTime="+e+")"),this.debugLog("üìÖ Scheduling page refresh for "+e+"s from now"),setTimeout((()=>{this.debugLog("üîÑ Performing page refresh now"),this.performRefresh()}),1e3*e),this.debugLog("‚úÖ AuthSessionManager.init() completed successfully")}showWarning(e){if(this.debugLog("‚ö†Ô∏è showWarning() called with countdown:",e),document.getElementById("session-warning"))return void this.debugLog("‚ö†Ô∏è Warning already exists, skipping");const i=document.createElement("div");i.id="session-warning",i.className="alert alert-info alert-dismissible fade show position-fixed",i.style.cssText="\n            top: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            z-index: 9999;\n            min-width: 350px;\n            max-width: 90%;\n            text-align: center;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            border: none;\n        ",i.innerHTML=`\n            <div class="d-flex align-items-center justify-content-center">\n                <i class="bi bi-clock me-2"></i>\n                <span>Page refreshes in <strong><span id="session-countdown">${e}</span>s</strong> to maintain security</span>\n                <button type="button" class="btn-close ms-3" onclick="window.authSessionManager.dismissWarning()"></button>\n            </div>\n        `,document.body.appendChild(i),this.debugLog("‚úÖ Warning alert added to DOM"),this.startCountdown(e),setTimeout((()=>{this.debugLog("üóëÔ∏è Auto-removing warning after countdown"),this.dismissWarning()}),1e3*e)}startCountdown(e){this.debugLog("‚è±Ô∏è Starting countdown from",e);const i=document.getElementById("session-countdown");let s=e;const n=setInterval((()=>{s--,this.debugLog("‚è±Ô∏è Countdown:",s),i&&(i.textContent=s,s<=3&&(i.style.color="#dc3545")),s<=0&&(this.debugLog("‚è±Ô∏è Countdown finished"),clearInterval(n))}),1e3)}dismissWarning(){this.debugLog("üóëÔ∏è dismissWarning() called");const e=document.getElementById("session-warning");e?(e.remove(),this.debugLog("‚úÖ Warning removed from DOM")):this.debugLog("‚ö†Ô∏è No warning found to dismiss")}performRefresh(){this.debugLog("üîÑ performRefresh() called"),(this.options.logActivity||this.options.debugLog)&&this.debugLog("üîÑ Refreshing page to prevent session expiry..."),setTimeout((()=>{window.location.reload(1)}),100)}}window.AuthSessionManager=AuthSessionManager,document.addEventListener("DOMContentLoaded",(function(){window.authSessionManager&&window.authSessionManager.options.debugLog}));